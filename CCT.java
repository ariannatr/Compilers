/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler;
import java.util.*;

import compiler.analysis.DepthFirstAdapter;
import compiler.node.*;

public class CCT extends DepthFirstAdapter
{

    private int indent=0;
    public void printtabs()
    {
        for(int i=0;i<indent;i++)
            System.out.print("   ");
    }
    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgramm().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    @Override
    public void caseAProgrammProgramm(AProgrammProgramm node)
    {
        inAProgrammProgramm(node);
        {
            List<PLine> copy = new ArrayList<PLine>(node.getLine());
            for(PLine e : copy)
            {
            	System.out.println("Programm :");
                indent++;
                e.apply(this);
            }
        }
        outAProgrammProgramm(node);
    }

    @Override
    public void caseALineLine(ALineLine node)
    {
        inALineLine(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outALineLine(node);
    }

    @Override
    public void caseAFuncDefFuncDef(AFuncDefFuncDef node)
    {
        inAFuncDefFuncDef(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        {
            List<PLocalDef> copy = new ArrayList<PLocalDef>(node.getLocalDef());
            for(PLocalDef e : copy)
            {
                e.apply(this);
            }

        }
        if(node.getBlock() != null)
        {

            node.getBlock().apply(this);
            indent--;
        }
        outAFuncDefFuncDef(node);
    }

    @Override
    public void caseAHeaderHeader(AHeaderHeader node)
    {
        inAHeaderHeader(node);
        if(node.getFun() != null)
        {
            printtabs();
        	System.out.print("Function_Name:");
            indent++;
            node.getFun().apply(this);
        }
        if(node.getVariable() != null)
        {
        	System.out.println("  "+node.getVariable());
            node.getVariable().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFparDef() != null)
        {
            printtabs();
        	System.out.println("FunctionParameters:");
            indent++;
            node.getFparDef().apply(this);
            indent--;
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRetType() != null)
        {
            System.out.println();
            printtabs();
        	System.out.print("ReturnType: ");
            node.getRetType().apply(this);       
        }
        outAHeaderHeader(node);
    }

    @Override
    public void caseAFparDef1FparDef(AFparDef1FparDef node)
    {
        printtabs();
        System.out.print("Name :");
        inAFparDef1FparDef(node);
        if(node.getRef() != null)
        {
        	System.out.print("ref ");
            node.getRef().apply(this);
        }
        if(node.getVariable() != null)
        {
        	System.out.println(node.getVariable());
            node.getVariable().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            printtabs();
        	System.out.println("Type :"+node.getType());
            node.getType().apply(this);
        }
        outAFparDef1FparDef(node);
    }

    @Override
    public void caseAFparDef2FparDef(AFparDef2FparDef node)
    {
        printtabs();
        System.out.print("Name :");
        inAFparDef2FparDef(node);
        if(node.getRef() != null)
        {
            System.out.print("ref ");
            node.getRef().apply(this);
        }
        if(node.getVariable() != null)
        {
            System.out.println(node.getVariable());
            node.getVariable().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outAFparDef2FparDef(node);
    }

    @Override
    public void caseAFparDef3FparDef(AFparDef3FparDef node)
    {
        printtabs();
        System.out.print("Name :");
        inAFparDef3FparDef(node);
        if(node.getRef() != null)
        {
            System.out.print("ref ");
            node.getRef().apply(this);
        }
        if(node.getVariable() != null)
        {
            System.out.println(node.getVariable());
            node.getVariable().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
           printtabs();
            System.out.println("Type :"+node.getType());
            node.getType().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outAFparDef3FparDef(node);
    }

 @Override
    public void caseAFparDef4FparDef(AFparDef4FparDef node)
    {
        inAFparDef4FparDef(node);
        printtabs();
        System.out.print("Name :");
        if(node.getRef() != null)
        {
            System.out.print("ref ");
            node.getRef().apply(this);
        }
        if(node.getVariable() != null)
        {
             System.out.println(node.getVariable());
            node.getVariable().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            printtabs();
            System.out.println("Type :"+node.getType());
            node.getType().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outAFparDef4FparDef(node);
    }

    @Override
    public void caseAFparDef5FparDef(AFparDef5FparDef node)
    {
        inAFparDef5FparDef(node);
        printtabs();
        System.out.println("None");
        outAFparDef5FparDef(node);
    }


    @Override
    public void caseAIntDataType(AIntDataType node)
    {
        inAIntDataType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntDataType(node);
    }

    @Override
    public void caseACharDataType(ACharDataType node)
    {
        inACharDataType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharDataType(node);
    }

    @Override
    public void caseATypeType(ATypeType node)
    {
        inATypeType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        {
            List<PArrayNum> copy = new ArrayList<PArrayNum>(node.getArrayNum());
            for(PArrayNum e : copy)
            {
                e.apply(this);
            }
        }
        outATypeType(node);
    }

    @Override
    public void caseADataTypRetType(ADataTypRetType node)
    {
        inADataTypRetType(node);
        if(node.getDataType() != null)
        {
            System.out.println(node.getDataType());
            node.getDataType().apply(this);
        }
        outADataTypRetType(node);
    }


    @Override
    public void caseANothingRetType(ANothingRetType node)
    {
        inANothingRetType(node);
        if(node.getNothing() != null)
        {
        	System.out.println(" Nothing");
            node.getNothing().apply(this);
        }
        outANothingRetType(node);
    }

    @Override
    public void caseAArrayNuArrayNum(AArrayNuArrayNum node)
    {
        inAArrayNuArrayNum(node);
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAArrayNuArrayNum(node);
    }


    @Override
    public void caseAFuncDeLocalDef(AFuncDeLocalDef node)
    {
        inAFuncDeLocalDef(node);
        if(node.getFuncDef() != null)
        {
            //System.out.print("FunctionDefintion:");
            node.getFuncDef().apply(this);
        }
        outAFuncDeLocalDef(node);
    }


    @Override
    public void caseAFuncDecLocalDef(AFuncDecLocalDef node)
    {
        inAFuncDecLocalDef(node);
        if(node.getFuncDecl() != null)
        {
            printtabs();
            indent++;
            System.out.println("FunctionDeclaration:");
            node.getFuncDecl().apply(this);
            indent--;
        }
        outAFuncDecLocalDef(node);
    }

    @Override
    public void caseAVarDefLocalDef(AVarDefLocalDef node)
    {
        inAVarDefLocalDef(node);

        printtabs();
        indent++;
        System.out.println("Variables:");
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        indent--;
        outAVarDefLocalDef(node);
    }

    @Override
    public void caseAExtraVariableExtraVariables(AExtraVariableExtraVariables node)
    {
        inAExtraVariableExtraVariables(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getVariable() != null)
        {
            System.out.println();
            printtabs();
            System.out.print("ExtraVariableName:"+node.getVariable());
            node.getVariable().apply(this);
        }
        outAExtraVariableExtraVariables(node);
    }

    @Override
    public void caseAVarDefVarDef(AVarDefVarDef node)
    {
        inAVarDefVarDef(node);
        printtabs();
        System.out.print("Name:");
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVariable() != null)
        {
            System.out.print(node.getVariable());
            node.getVariable().apply(this);
        }
        {
            List<PExtraVariables> copy = new ArrayList<PExtraVariables>(node.getVariables());
            for(PExtraVariables e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            System.out.println();
            printtabs();
            System.out.println("Type:"+node.getType());
            node.getType().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAVarDefVarDef(node);
    }

    @Override
    public void caseAFuncDeclFuncDecl(AFuncDeclFuncDecl node)
    {
        inAFuncDeclFuncDecl(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAFuncDeclFuncDecl(node);
    }

    @Override
    public void caseAEmptyStmt(AEmptyStmt node)
    {
        inAEmptyStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAEmptyStmt(node);
    }

    @Override
    public void caseAExprStmt(AExprStmt node)
    {
        inAExprStmt(node);
        if(node.getLValue() != null)
        {
            System.out.println();
            printtabs();
            System.out.println("Assignment:");
            indent++;
            printtabs();
            System.out.print("Assignment var:");
            node.getLValue().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getExpr() != null)
        {
            System.out.println();
            printtabs();
            System.out.println("ValueOfAssignment:");
            indent++;
            printtabs();
            node.getExpr().apply(this);
            indent--;
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        indent--;
        outAExprStmt(node);
    }

    @Override
    public void caseABlockStmt(ABlockStmt node)
    {
        inABlockStmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStmt(node);
    }

    @Override
    public void caseAFuncCallStmt(AFuncCallStmt node)
    {
        inAFuncCallStmt(node);
        if(node.getFuncCall() != null)
        {
            System.out.println();
            printtabs();
            System.out.print("FunctionCall:");
            indent++;
            node.getFuncCall().apply(this);
            indent--;
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAFuncCallStmt(node);
    }

    @Override
    public void caseAIfStatementStmt(AIfStatementStmt node)
    {
        inAIfStatementStmt(node);
        if(node.getIfStatement() != null)
        {
            node.getIfStatement().apply(this);
        }
        outAIfStatementStmt(node);
    }

    @Override
    public void caseAWhileStatementStmt(AWhileStatementStmt node)
    {
        inAWhileStatementStmt(node);
        if(node.getWhileStatement() != null)
        {
            node.getWhileStatement().apply(this);
        }
        outAWhileStatementStmt(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        inAReturnStmt(node);
        if(node.getReturn() != null)
        {
            printtabs();
            System.out.print("Return:");
            node.getReturn().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAReturnStmt(node);
    }

    @Override
    public void caseABlockBlock(ABlockBlock node)
    {
        inABlockBlock(node);
        System.out.println();
        printtabs();
        System.out.println("Block:");
        
        if(node.getLBrc() != null)
        {
            printtabs();
            System.out.println("{");
            indent++;
            node.getLBrc().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStatements());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
            indent--;
            System.out.println();
            printtabs();
            System.out.println("}");
        }
        outABlockBlock(node);
    }

    @Override
    public void caseANoElseIfStatement(ANoElseIfStatement node)
    {
        inANoElseIfStatement(node);
        if(node.getIf() != null)
        {
            System.out.println();
            printtabs();
            System.out.print("If: ");
            indent++;
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            System.out.println();
            indent--;
            printtabs();
            System.out.print("Then:");
            indent++;
            node.getThen().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
            indent--;
        }
        outANoElseIfStatement(node);
    }

    @Override
    public void caseAWithElseIfStatement(AWithElseIfStatement node)
    {
        inAWithElseIfStatement(node);
        if(node.getIf() != null)
        {
            System.out.println();
            printtabs();
            System.out.print("If: ");
            indent++;
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            System.out.println();
            indent--;
            printtabs();
            System.out.print("Then:");
            indent++;
            node.getThen().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        if(node.getElse() != null)
        {
            System.out.println();
            indent--;
            printtabs();
            System.out.print("Else:");
            indent++;
            node.getElse().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
            indent--;
        }
        outAWithElseIfStatement(node);
    }

    @Override
    public void caseANoopStmtWithElse(ANoopStmtWithElse node)
    {
        inANoopStmtWithElse(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outANoopStmtWithElse(node);
    }

    @Override
    public void caseAIfStmtWithElse(AIfStmtWithElse node)
    {
        inAIfStmtWithElse(node);
        if(node.getIfElseStmt() != null)
        {
            node.getIfElseStmt().apply(this);
        }
        outAIfStmtWithElse(node);
    }

    @Override
    public void caseAReturnElseStmtWithElse(AReturnElseStmtWithElse node)
    {
        inAReturnElseStmtWithElse(node);
        if(node.getReturn() != null)
        {
            System.out.print("Return: ");
            node.getReturn().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAReturnElseStmtWithElse(node);
    }

    @Override
    public void caseAThenExprStmtWithElse(AThenExprStmtWithElse node)
    {
        inAThenExprStmtWithElse(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAThenExprStmtWithElse(node);
    }

    @Override
    public void caseAThenFuncCallStmtWithElse(AThenFuncCallStmtWithElse node)
    {
        inAThenFuncCallStmtWithElse(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAThenFuncCallStmtWithElse(node);
    }

    @Override
    public void caseAThenWhileStatementStmtWithElse(AThenWhileStatementStmtWithElse node)
    {
        inAThenWhileStatementStmtWithElse(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getStmtWithElse() != null)
        {
            node.getStmtWithElse().apply(this);
        }
        outAThenWhileStatementStmtWithElse(node);
    }

    @Override
    public void caseABlockElseStmtWithElse(ABlockElseStmtWithElse node)
    {
        inABlockElseStmtWithElse(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockElseStmtWithElse(node);
    }

    @Override
    public void caseAIfElseIfElseStmt(AIfElseIfElseStmt node)
    {
        inAIfElseIfElseStmt(node);
        if(node.getIf() != null)
        {
            System.out.println();
            indent++;
            printtabs();
            System.out.print("If: ");
            indent++;
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            System.out.println();
            indent--;
            printtabs();
            System.out.print("Then:");
            indent++;
            node.getThen().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        if(node.getElse() != null)
        {
            System.out.println();
            indent--;
            printtabs();
            System.out.print("Else:");
            node.getElse().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        outAIfElseIfElseStmt(node);
    }

    @Override
    public void caseAWhileStatementWhileStatement(AWhileStatementWhileStatement node)
    {
        inAWhileStatementWhileStatement(node);
        if(node.getWhile() != null)
        {
            System.out.println();
            printtabs();
            System.out.print("While: ");
            indent++;
            node.getWhile().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getDo() != null)
        {
            indent--;
            System.out.println();
            printtabs();
            System.out.println("Do: ");
            indent++;
            node.getDo().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
            indent--;
        }
        outAWhileStatementWhileStatement(node);
    }

    @Override
    public void caseAFuncCallFuncCall(AFuncCallFuncCall node)
    {
        inAFuncCallFuncCall(node);
        if(node.getVariable() != null)
        {
            System.out.print(node.getVariable());
            node.getVariable().apply(this);
            System.out.println();
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFunParam() != null)
        {
            printtabs();
            System.out.println("FunctionParameters:");
            indent++;
            printtabs();
            node.getFunParam().apply(this);
            System.out.println();
            indent--;
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFuncCallFuncCall(node);
    }

    @Override
    public void caseAOneFunParam(AOneFunParam node)
    {
        inAOneFunParam(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAOneFunParam(node);
    }

    @Override
    public void caseAManyFunParam(AManyFunParam node)
    {
        inAManyFunParam(node);
        if(node.getFunParam() != null)
        {
            node.getFunParam().apply(this);
        }
        if(node.getComma() != null)
        {
            System.out.print(" ,");
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            System.out.println();
            printtabs();
            node.getExpr().apply(this);
        }
        outAManyFunParam(node);
    }

    @Override
    public void caseANoneFunParam(ANoneFunParam node)
    {
        System.out.print("No Parameter Given");
        inANoneFunParam(node);
        outANoneFunParam(node);
    }

    @Override
    public void caseACondOrCond(ACondOrCond node)
    {
        inACondOrCond(node);
        if(node.getCond() != null)
        {
            System.out.println();
            printtabs();
            System.out.println("Left:");
            indent++;
            printtabs();
            System.out.print("( ");
            node.getCond().apply(this);
            System.out.println();
            printtabs();
            System.out.println(" ) ");
             indent--;
        }
        if(node.getOr() != null)
        {
            printtabs();
            System.out.println(" Operator: or ");
            node.getOr().apply(this);
        }
        if(node.getCondAnd() != null)
        {
            printtabs();
            System.out.println("Right:");
            indent++;
            printtabs();
            System.out.print(" ( ");
            node.getCondAnd().apply(this);
            System.out.println();
            printtabs();
            System.out.println(" ) ");
            indent--;
        }
        outACondOrCond(node);
    }

    @Override
    public void caseAConditionOrExprCond(AConditionOrExprCond node)
    {
        inAConditionOrExprCond(node);
        if(node.getCondAnd() != null)
        {
            node.getCondAnd().apply(this);
        }
        outAConditionOrExprCond(node);
    }

    @Override
    public void caseACompAndCondAnd(ACompAndCondAnd node)
    {
        inACompAndCondAnd(node);
        if(node.getCondAnd() != null)
        {
            System.out.println();
            printtabs();
            System.out.println("Left:");
            indent++;
            printtabs();
            System.out.print("( ");
            node.getCondAnd().apply(this);
            System.out.println();
            printtabs();
            System.out.println(" ) ");
             indent--;
        }
        if(node.getAnd() != null)
        {
            printtabs();
            System.out.println("Operator: and ");
            node.getAnd().apply(this);
        }
        if(node.getCondNot() != null)
        {
            printtabs();
            System.out.println("Right:");
            indent++;
            printtabs();
            System.out.print(" ( ");
            node.getCondNot().apply(this);
            System.out.println();
            printtabs();
            System.out.println(" ) ");
            indent--;
           
        }
        outACompAndCondAnd(node);
    }

    @Override
    public void caseACompEqExprCondAnd(ACompEqExprCondAnd node)
    {
        inACompEqExprCondAnd(node);
        if(node.getCondNot() != null)
        {
            node.getCondNot().apply(this);
        }
        outACompEqExprCondAnd(node);
    }

    @Override
    public void caseACompNotEqCondNot(ACompNotEqCondNot node)
    {
        inACompNotEqCondNot(node);
        if(node.getNot() != null)
        {
            System.out.print(" not(");
            node.getNot().apply(this);
        }
        if(node.getCondNot() != null)
        {
            node.getCondNot().apply(this);
            System.out.print(" )");
        }
        outACompNotEqCondNot(node);
    }

    @Override
    public void caseACompNotExprCondNot(ACompNotExprCondNot node)
    {
        inACompNotExprCondNot(node);
        if(node.getCondEq() != null)
        {
            node.getCondEq().apply(this);
        }
        outACompNotExprCondNot(node);
    }

    @Override
    public void caseACompEqCondEq(ACompEqCondEq node)
    {
        inACompEqCondEq(node);
        if(node.getLeft() != null)
        {
            System.out.println();
            printtabs();
            System.out.println("Left:");
            indent++;
            printtabs();
            System.out.print("( ");
            node.getLeft().apply(this);
            System.out.println();
            printtabs();
            System.out.println(") ");
            indent--;
        }
        if(node.getCompareRelOperators() != null)
        {
            printtabs();
            System.out.println("Operator: "+node.getCompareRelOperators());
            node.getCompareRelOperators().apply(this);
        }
        if(node.getRight() != null)
        {
            printtabs();
            System.out.println("Right:");
            indent++;
            printtabs();
            System.out.print(" ( ");
            node.getRight().apply(this);
            System.out.println();
            printtabs();
            System.out.print(" )");
            indent--;
            
        }
        outACompEqCondEq(node);
    }

    @Override
    public void caseACondBlockCondEq(ACondBlockCondEq node)
    {
        inACondBlockCondEq(node);
        if(node.getLPar() != null)
        {
            System.out.print(" ( ");
            node.getLPar().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
            System.out.print(" ) ");
        }
        outACondBlockCondEq(node);
    }

    @Override
    public void caseAEqCompareRelOperators(AEqCompareRelOperators node)
    {
        inAEqCompareRelOperators(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqCompareRelOperators(node);
    }

    @Override
    public void caseANeqCompareRelOperators(ANeqCompareRelOperators node)
    {
        inANeqCompareRelOperators(node);
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        outANeqCompareRelOperators(node);
    }

    @Override
    public void caseAHashtagCompareRelOperators(AHashtagCompareRelOperators node)
    {
        inAHashtagCompareRelOperators(node);
        if(node.getHashtag() != null)
        {
            node.getHashtag().apply(this);
        }
        outAHashtagCompareRelOperators(node);
    }

    @Override
    public void caseALtCompareRelOperators(ALtCompareRelOperators node)
    {
        inALtCompareRelOperators(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtCompareRelOperators(node);
    }

    @Override
    public void caseAGtCompareRelOperators(AGtCompareRelOperators node)
    {
        inAGtCompareRelOperators(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtCompareRelOperators(node);
    }

    @Override
    public void caseALteqCompareRelOperators(ALteqCompareRelOperators node)
    {
        inALteqCompareRelOperators(node);
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        outALteqCompareRelOperators(node);
    }

    @Override
    public void caseAGteqCompareRelOperators(AGteqCompareRelOperators node)
    {
        inAGteqCompareRelOperators(node);
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        outAGteqCompareRelOperators(node);
    }

    @Override
    public void caseAIdLValue(AIdLValue node)
    {
        inAIdLValue(node);
        if(node.getVariable() != null)
        {
            System.out.print("Identifier: "+node.getVariable());
            node.getVariable().apply(this);
        }
        outAIdLValue(node);
    }

    @Override
    public void caseAStringLitLValue(AStringLitLValue node)
    {
        inAStringLitLValue(node);
        if(node.getStringLit() != null)
        {
            node.getStringLit().apply(this);
            System.out.print("String Literal:"+node.getStringLit());
        }
        outAStringLitLValue(node);
    }

    @Override
    public void caseALValueArrayLValue(ALValueArrayLValue node)
    {
        inALValueArrayLValue(node);
        if(node.getLValueArray() != null)
        {   
            System.out.println(node.getLValueArray());
            node.getLValueArray().apply(this);
        }
        outALValueArrayLValue(node);
    }

    @Override
    public void caseALValueArrrayLValueArray(ALValueArrrayLValueArray node)
    {
        inALValueArrrayLValueArray(node);
        if(node.getLValue() != null)
        {
            printtabs();
            node.getLValue().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getExpr() != null)
        {
            System.out.println();
            printtabs();
            indent++;
            System.out.println("Expression of bracket:");
            printtabs();
            node.getExpr().apply(this);
            indent--;
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outALValueArrrayLValueArray(node);
    }

    @Override
    public void caseAFactorExpr(AFactorExpr node)
    {
        inAFactorExpr(node);
        if(node.getFactor() != null)
        {
            System.out.print("Factor:");
            node.getFactor().apply(this);
        }
        outAFactorExpr(node);
    }

    @Override
    public void caseAPlusExpr(APlusExpr node)
    {
        inAPlusExpr(node);
        if(node.getExpr() != null)
        {   
            System.out.print("( ");
            node.getExpr().apply(this);
        }
        if(node.getPlus() != null)
        {
            System.out.print(" + ");
            node.getPlus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
            System.out.print(")");
        }
        outAPlusExpr(node);
    }

    @Override
    public void caseAMinusExpr(AMinusExpr node)
    {
        inAMinusExpr(node);
        if(node.getExpr() != null)
        {
            System.out.print("( ");
            node.getExpr().apply(this);
        }
        if(node.getMinus() != null)
        {
            System.out.print(" - ");
            node.getMinus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
            System.out.print(" )");
        }
        outAMinusExpr(node);
    }

    @Override
    public void caseAFuncCallTerm(AFuncCallTerm node)
    {
        inAFuncCallTerm(node);
        if(node.getFuncCall() != null)
        {
            System.out.print("FunctionCall:");
            node.getFuncCall().apply(this);
        }
        outAFuncCallTerm(node);
    }

    @Override
    public void caseAFactorTermFactor(AFactorTermFactor node)
    {
        inAFactorTermFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAFactorTermFactor(node);
    }

    @Override
    public void caseAMultFactor(AMultFactor node)
    {
        inAMultFactor(node);
        if(node.getFactor() != null)
        {
            System.out.print("( ");
            node.getFactor().apply(this);
        }
        if(node.getStar() != null)
        {
          
            System.out.print(" * ");
            node.getStar().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
            System.out.print(" )");
        }
        outAMultFactor(node);
    }

    @Override
    public void caseASlashFactor(ASlashFactor node)
    {
        inASlashFactor(node);
        if(node.getFactor() != null)
        {
            System.out.print("( ");
            node.getFactor().apply(this);
        }
        if(node.getSlash() != null)
        {
            System.out.print(" / ");
            node.getSlash().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
             System.out.print(" )");
        }
        outASlashFactor(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        inAModFactor(node);
        if(node.getFactor() != null)
        { 
            System.out.print("( ");
            node.getFactor().apply(this);
        }
        if(node.getMod() != null)
        {
            System.out.print(" mod ");
            node.getMod().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
             System.out.print(" )");
        }
        outAModFactor(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        inADivFactor(node);
        if(node.getFactor() != null)
        {
            System.out.print("( ");
            node.getFactor().apply(this);
        }
        if(node.getDiv() != null)
        {
            System.out.print(" div ");
            node.getDiv().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
              System.out.print(" )");
        }
        outADivFactor(node);
    }

    @Override
    public void caseATermIntTerm(ATermIntTerm node)
    {
        inATermIntTerm(node);
        if(node.getInteger() != null)
        {
            System.out.print("Integer: "+node.getInteger());
            node.getInteger().apply(this);
        }
        outATermIntTerm(node);
    }

    @Override
    public void caseATermCharTerm(ATermCharTerm node)
    {
        inATermCharTerm(node);
        if(node.getConstChar() != null)
        {
            System.out.print("Char: "+node.getConstChar());
            node.getConstChar().apply(this);
        }
        outATermCharTerm(node);
    }

    @Override
    public void caseATermValTerm(ATermValTerm node)
    {
        inATermValTerm(node);
        if(node.getLValue() != null)
        {
             System.out.print("Lvalue: ");
            node.getLValue().apply(this);
        }
        outATermValTerm(node);
    }

    @Override
    public void caseAPlusMinusExpTerm(APlusMinusExpTerm node)
    {
        inAPlusMinusExpTerm(node);
        if(node.getPlusMinus() != null)
        {
            System.out.print("(");
            node.getPlusMinus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
            System.out.print(" )");
        }
        outAPlusMinusExpTerm(node);
    }

    @Override
    public void caseATermExprTerm(ATermExprTerm node)
    {
        inATermExprTerm(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outATermExprTerm(node);
    }

    @Override
    public void caseAPlusPlusMinus(APlusPlusMinus node)
    {
        inAPlusPlusMinus(node);
        if(node.getPlus() != null)
        {
            System.out.print(" + ");
            node.getPlus().apply(this);
        }
        outAPlusPlusMinus(node);
    }

    @Override
    public void caseAMinusPlusMinus(AMinusPlusMinus node)
    {
        inAMinusPlusMinus(node);
        if(node.getMinus() != null)
        {
            System.out.print(" - ");
            node.getMinus().apply(this);
        }
        outAMinusPlusMinus(node);
    }

    @Override
    public void caseAPlusOperators(APlusOperators node)
    {
        inAPlusOperators(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusOperators(node);
    }

    @Override
    public void caseAMinusOperators(AMinusOperators node)
    {
        inAMinusOperators(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusOperators(node);
    }

    @Override
    public void caseAStarOperators(AStarOperators node)
    {
        inAStarOperators(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarOperators(node);
    }

    @Override
    public void caseADivOperators(ADivOperators node)
    {
        inADivOperators(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivOperators(node);
    }

    @Override
    public void caseAModOperators(AModOperators node)
    {
        inAModOperators(node);
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAModOperators(node);
    }

    @Override
    public void caseAAndBinaryOperators(AAndBinaryOperators node)
    {
        inAAndBinaryOperators(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndBinaryOperators(node);
    }

    @Override
    public void caseAOrBinaryOperators(AOrBinaryOperators node)
    {
        inAOrBinaryOperators(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrBinaryOperators(node);
    }
}

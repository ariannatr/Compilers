Package compiler;


Helpers
  unicode_input_character = [0..0xffff];
  sp = ' ';
  lf = 0x000a;
  cr = 0x000d;
  ff = 0x000c;
  ht = 0x0009; 
  line_terminator = lf | cr | cr lf;
  input_comment = [unicode_input_character - '$'];
  input_character = [unicode_input_character - [cr + lf ]];
  white_space = (sp | ht | ff | line_terminator)*;
  digit = ['0' .. '9'];
  sq=0x0027;
  nn=digit | ['a'..'f'] |['A'..'F'];
  escape_sequence = '\t' | '\n' | '\r' | '\0' | '\\' | '\' sq | '\"' | '\x'nn ;
  letter=['a' .. 'z'] | ['A' .. 'Z'] ;
  char_or_digit =letter | digit |'_';
  char_literal = ' ' | '!'| '#' | '$' | '%' | '&' | '(' | ')' 
        | '*' | '+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' | '=' | '>' 
        | '?' | '@' | '[' | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~' | letter | digit | escape_sequence;

Tokens
  white_space = white_space;
  escape_sequence=escape_sequence;
 
  and = 'and';
  char  = 'char';
  div = 'div';
  do  = 'do';
  else  = 'else';
  fun   = 'fun';
  if  = 'if';
  int   = 'int';
  mod   = 'mod';
  not   = 'not';
  nothing= 'nothing';
  or  = 'or';
  ref = 'ref';
  return= 'return';
  then  = 'then';
  var = 'var';
  while = 'while';

  //operators

  minus = '-';
  plus  = '+';
  star  = '*';
  hashtag = '#';
  gt  = '>';
  gteq  = '>=';
  lt  = '<';
  lteq  = '<=';
  slash = '/';
  equal = '=';
  neq   = '<>';
  
  // separators

  comma = ',';
  l_bkt = '[';
  l_brc = '{';
  l_par = '(';
  r_bkt = ']';
  r_brc = '}';
  r_par = ')';
  semi  = ';';
  colon = ':';
  arrow = '<-';  

  variable = letter char_or_digit*;

  integer=digit+;
  no_integer=digit+ (letter|'_')+;
  string_lit ='"'char_literal*'"';
  const_char=sq char_literal sq;

  //comments

  end_of_line_comment = '$' input_comment input_character* line_terminator?;
  big_comment = '$$' input_comment* ('$' (input_comment+))* '$$';
Ignored Tokens
  white_space,
  end_of_line_comment,
  big_comment;
  

Productions

programm = 
  {programm}func_def{->New programm(func_def)};

func_def = 
  {func_def}header local_def* block{->New func_def.func_def(header,[local_def],[block.stmt])};

header =
  {header} fun  variable l_par fpar_def r_par colon ret_type{->New header.header(variable,fpar_def,ret_type)};

block{->stmt*}= 
  {block}l_brc [statements]:stmt* r_brc{->[statements]};

fpar_def =
    {fpar_def1} ref? variable colon type{-> New fpar_def.fpar_def1(ref,variable,type)}|
    {fpar_def2} ref? variable comma fpar_def{-> New fpar_def.fpar_def2(ref,variable,fpar_def)} |
    {fpar_def3} ref? variable colon type comma fpar_def{-> New fpar_def.fpar_def3(ref,variable,type,fpar_def)} |
    {fpar_def4} ref? variable colon type semi fpar_def{-> New fpar_def.fpar_def4(ref,variable,type,fpar_def)} |
    {fpar_def5} ;

/*types*/
data_type = 
  {int} int{->New data_type.int(int)}| 
  {char} char{->New data_type.char(char)};

type = 
  {type }data_type array_num?{->New type.type(data_type,array_num)}
  |{type2} data_type array_num array_num_defined+ {-> New type.type2(data_type,array_num,[array_num_defined])};

ret_type = 
  {data_type} data_type {->New ret_type.data_type(data_type)}|
  {nothing} nothing {->New ret_type.nothing(nothing)};

array_num =
  {array_num} l_bkt integer? r_bkt {->New array_num.array_num(l_bkt,integer,r_bkt)};

array_num_defined=
 {array_num_defined} l_bkt integer r_bkt {->New array_num_defined.array_num_defined(l_bkt,integer,r_bkt)};


local_def = 
  {func_def} func_def{-> New local_def.func_def(func_def)} | 
  {func_decl} func_decl{-> New local_def.func_decl(func_decl)}|
  {var_def} var_def{-> New local_def.var_def(var_def)};

extra_variables{->variable*} = 
  {extra_variable}comma variable{->[variable]};

var_def =
  {var_def}var variable [variables]:extra_variables* colon type semi{-> New var_def.var_def(variable,[variables.variable],type)};

func_decl =
 {func_decl}header semi{->New func_decl.func_decl(header)};

stmt =
  {empty} semi{->New stmt.empty()} |
  {expr} l_value arrow expr semi{->New stmt.expr(l_value,expr)} |
  {block} block{->New stmt.block([block.stmt])} |
  {func_call} func_call semi{->New stmt.func_call(func_call)}| 
  {if_statement} if_statement{->if_statement.stmt}|
  {while_statement} while_statement{->while_statement.stmt}|
  {return} return expr? semi{->New stmt.return(expr)};


if_statement{->stmt}=
  {no_else}if cond then [then_stmt]:stmt{->New stmt.if(cond.expr,then_stmt.stmt)} |
  {with_else}if cond then [then_stmt]:stmt_with_else 
    else [else_stmt]:stmt{->New stmt.if_else(cond.expr,then_stmt.stmt,else_stmt.stmt)};

stmt_with_else{->stmt} = 
     {noop} semi {->New stmt.empty()}
    | {if} if_else_stmt {->if_else_stmt.stmt}
    | {return_else} return expr? semi{->New stmt.return(expr)}
    | {then_expr} l_value arrow expr semi {->New stmt.expr(l_value,expr)}
    | {then_func_call} func_call semi {->New stmt.func_call(func_call)}
    | {then_while_statement} while cond do stmt_with_else{->New stmt.while_statement(cond.expr,stmt_with_else.stmt)}
    | {block_else} block{->New stmt.block([block.stmt])};

if_else_stmt{->stmt} = 
  {if_else}if cond then [then_stmt]:stmt_with_else 
  else [else_stmt]:stmt_with_else{->New stmt.if_else(cond.expr,then_stmt.stmt,else_stmt.stmt)};

 while_statement{->stmt}=
  {while_statement}while cond do stmt{->New stmt.while_statement(cond.expr,stmt)};

func_call= 
  {func_call} variable l_par [fun]:fun_param r_par {-> New func_call.func_call(variable,[fun.expr])};

fun_param{->expr*} = 
  {one} expr{->[expr]} |
  {many} fun_param comma expr{->[fun_param.expr,expr]}|
  {none} {->[]};

cond{->expr} = 
  {cond_or} cond or cond_and{->New expr.cond_or(cond.expr,cond_and.expr)}|
  {condition_or_expr}cond_and{->cond_and.expr};
  
cond_and{->expr}=
  {comp_and} cond_and and cond_not{->New expr.comp_and(cond_and.expr,cond_not.expr)}|
  {comp_eq_expr} cond_not{->cond_not.expr};

cond_not{->expr}=
  {comp_not_eq} not cond_not{->New expr.comp_not_eq(cond_not.expr)}|
  {comp_not_expr} cond_eq {->cond_eq.expr};

cond_eq{->expr}=
  {comp_eq} [left]:expr compare_rel_operators [right]:expr{->New expr.comp_eq(left.expr,compare_rel_operators,right.expr)}|
  {cond_block} l_par cond r_par{->New expr.cond_block(cond.expr)};

compare_rel_operators= 
  {eq}equal |
  {neq}neq|
  {hashtag} hashtag |
  {lt} lt |
  {gt} gt |
  {lteq} lteq |
  {gteq} gteq ;

l_value =
  {id} variable {->New l_value.id(variable)} |
  {string_lit} string_lit{->New l_value.string_lit(string_lit)} | 
  {l_value_array} l_value_array{->New l_value.l_value_array(l_value_array)};

l_value_array=
  {l_value_arrray}l_value l_bkt expr r_bkt{-> New l_value_array.l_value_array(l_value,expr)};

/* Expressions */
expr  =
  {factor} factor {->factor.expr}|
  {plus}expr plus factor{->New expr.plus(expr,factor.expr)}|
  {minus}expr minus factor{->New expr.minus(expr,factor.expr)};

factor{->expr} =
  {factor_term}term {->term.expr}|
  {mult} factor star term {->New expr.mult(factor.expr,term.expr)} |
  {slash}  factor slash term {->New expr.slash(factor.expr,term.expr)}|
  {mod}  factor mod term {->New expr.mod(factor.expr,term.expr)}|
  {div}  factor div term {->New expr.div(factor.expr,term.expr)};

term {->expr} =
  {term_int} integer {-> New expr.term_int(integer)} | 
  {term_char} const_char {-> New expr.term_char(const_char)} | 
  {term_val} l_value {-> New expr.term_val(l_value)} |
  {plus_minus_exp} plus_minus term {-> New expr.plus_minus_exp(term.expr)}|
  {func_call} func_call {-> New expr.func_call(func_call)}|
  {term_expr} l_par expr r_par {-> expr.expr};

plus_minus = 
  {plus} plus|
  {minus} minus;

operators = 
  {plus} plus | 
  {minus} minus | 
  {star}star |
  {div} div |
  {mod} mod ;

binary_operators = 
  {and} and |
  {or} or;

/*-----------------------------------------------------------------*/
/*-----------------------------------------------------------------*/
Abstract Syntax Tree

programm = 
  func_def;

func_def = 
  {func_def}header local_def* stmt*;

header =
  {header}  variable  fpar_def  ret_type;

local_def = 
  {func_def} func_def | 
  {func_decl} func_decl|
  {var_def} var_def;

func_decl =
 {func_decl}header;

fpar_def =
    {fpar_def1} ref? variable type|
    {fpar_def2} ref? variable fpar_def |
    {fpar_def3} ref? variable type  fpar_def |
    {fpar_def4} ref? variable type  fpar_def |
    {fpar_def5} ;

var_def =
  {var_def} variable [variables]:variable* type;


stmt =
  {empty}|
  {semi} |
  {expr} l_value expr|
  {block} [statements]:stmt*|
  {func_call} func_call| 
  {while_statement} expr  [stmt]:stmt|
  {return}expr?|
  {if}  [condition]:expr [statement]:stmt |
  {if_else} [condition]:expr [then]:stmt [else]:stmt ;


func_call = 
  {func_call} variable expr* ;

/*types*/

type = 
  {type}data_type array_num?
  |{type2} data_type array_num array_num_defined+ ;

ret_type = 
  {data_type} data_type 
  |{nothing} nothing;

array_num =
  {array_num} l_bkt integer? r_bkt;

array_num_defined =
{array_num_defined} l_bkt integer r_bkt;


data_type = 
  {int} int | 
  {char} char;

/*l_value*/

l_value =
{id} variable |
{string_lit} string_lit | 
{l_value_array} l_value_array;

l_value_array=
  {l_value_array}l_value expr ;

compare_rel_operators= 
  {eq}equal |
  {neq}neq|
  {hashtag} hashtag |
  {lt} lt |
  {gt} gt |
  {lteq} lteq |
  {gteq} gteq ;

/* Expressions */

expr =
  {cond_or} [left]:expr [right]:expr|
  {comp_and} [left]:expr [right]:expr|
  {comp_eq} [left]:expr compare_rel_operators [right]:expr|
  {comp_not_eq} expr |
  {cond_block} expr |
  {plus}[left]:expr  [right]:expr|
  {minus}[left]:expr [right]:expr|
  {mult} [left]:expr [right]:expr |
  {slash} [left]:expr [right]:expr|
  {mod}  [left]:expr [right]:expr|
  {div} [left]:expr  [right]:expr|
  {term_int} integer | 
  {term_char} const_char | 
  {term_val} l_value |
  {plus_minus_exp} expr|
  {func_call} func_call|
  {term_expr} expr;
